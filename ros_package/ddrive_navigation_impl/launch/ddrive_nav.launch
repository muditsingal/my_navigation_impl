<!-- Every launch file starts with this command -->
<launch> 

	<!-- Include helps you launch other launch files within this launch file-->
	<!-- For file tag, mention the gazebo_ros empty world's launch file -->
	<!-- For the arg name, give any name of your choice to this world -->
	<!-- for the value tag, provide the path to the world file that you downloaded -->
	<include file= "$(find gazebo_ros)/launch/empty_world.launch"> 
		<arg name="world_name" value="$(find ddrive_navigation_impl)/worlds/world1.world" />
	</include>
		

        <!-- Defining this param here helps you store all the urdf contents of robot+lidar into a single param name -->
        <!-- fill the command by adding in the path to your .xacro file the $ symbol below -->
        <!--  -->
	<param name= "robot_description" command="$(find xacro)/xacro $(find ddrive_navigation_impl)/urdf/ddrive_navigation_impl_integration.urdf.xacro " />
	<!-- Add in your robot name in the value tag -->
	<param name = "my_robot" value="ddrive_navigation_impl"/> 
	<arg name ="init_pose" value="-x 0 -y 0 -z 0 -R 0 -P 0 -Y 0"/>
	<!-- remap from="/laser/scan" to="/scan" / -->

	<!-- TF node that gives the static transformation between the world map and the base link of your robot. Change /base_link to the /root link name of your robot -->
	<node name="tf_footprint_base" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 /base_link /base_footprint 30" />
	<node name="tf_map_odom" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 /map /odom 30" />


	<!-- A node to publish the robot states onto ros network -->
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen" />	
	
	<!-- Map file -->
	<arg name="map_file" default="$(find ddrive_navigation_impl)/maps/ddrive_map1.yaml"/>

	<!-- Map server publishes: /map and /map_metadata -->
	<node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />
	
	<!-- AMCL node -->
	<!-- Subscribes to /scan, /tf, /initialpose, /map publishes /amcl_pose, /particlecloud, /tf -->
	<include file="$(find amcl)/examples/amcl_diff.launch"/>
	
	<!-- Move Base Node -->
	<!-- Subscribes to /move_base_simple/goal publishes cmd_vel -->
	<node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
		<rosparam file="$(find ddrive_navigation_impl)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
		<rosparam file="$(find ddrive_navigation_impl)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
		<rosparam file="$(find ddrive_navigation_impl)/param/global_costmap_params.yaml" command="load" ns="global_costmap" />
		<rosparam file="$(find ddrive_navigation_impl)/param/local_costmap_params.yaml" command="load" ns="local_costmap" />
		<rosparam file="$(find ddrive_navigation_impl)/param/base_local_planner_params.yaml" command="load" />
	</node>
	
	<node type="rviz" name="rviz" pkg="rviz" args="-d $(find ddrive_navigation_impl)/config/nav_rviz_config.rviz" />


	<!-- A node to spawn the robot into gazebo's world file. Notice that the args has the param robot_description that you previously defined. This is how your robot's spec gets included.-->
	<node
		name="spawn_model"
		pkg="gazebo_ros"
		type="spawn_model"
		args="$(arg init_pose) -param robot_description -urdf -model my_robot"
		output="screen"/>


	<!--Default node -->
	<node
		name="fake_joint_calibration"
		pkg="rostopic"
		type="rostopic"
		args="pub /calibrated std_msgs/Bool true" />


</launch>
